/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package me.hardcoded.arucas.language;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import me.hardcoded.arucas.psi.ArucasTypes;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Arucas.flex</tt>
 */
class ArucasLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING_DOUBLE = 2;
  public static final int STRING_SINGLE = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [8, 6, 7]
   * Total runtime size is 1040 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>13]|((ch>>7)&0x3f)]|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 136 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\207\100");

  /* The ZZ_CMAP_Y table has 128 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\177\200");

  /* The ZZ_CMAP_A table has 256 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\26\1\25\1\0\1\26\1\25\22\0\1\26\1\37\1\45\3\0\1\44\1\46\1\47\1\50"+
    "\1\34\1\33\1\57\1\32\1\31\1\35\12\30\1\55\1\56\1\42\1\40\1\41\2\0\32\27\1"+
    "\51\1\60\1\52\1\36\1\27\1\0\1\10\1\23\1\11\1\22\1\3\1\2\1\27\1\12\1\1\1\27"+
    "\1\24\1\4\1\27\1\17\1\6\1\20\1\27\1\7\1\5\1\14\1\16\1\21\1\13\1\27\1\15\1"+
    "\27\1\53\1\43\1\54\202\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\16\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\2\1"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\3\32\1\34\23\2"+
    "\1\0\1\35\1\36\1\37\1\0\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\32\1\47\1\2\1\50"+
    "\12\2\1\51\2\2\1\52\1\2\1\53\2\2\1\4"+
    "\2\0\2\2\1\54\6\2\1\55\2\2\1\56\1\57"+
    "\1\60\2\2\1\0\1\40\1\2\1\61\4\2\1\62"+
    "\1\2\1\63\1\64\1\2\1\65\1\2\1\66\1\67"+
    "\1\2\1\70\2\2\1\71\2\2\1\72\1\73\1\74";

  private static int [] zzUnpackAction() {
    int [] result = new int[149];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\223\0\304\0\365\0\u0126\0\u0157"+
    "\0\u0188\0\u01b9\0\u01ea\0\u021b\0\u024c\0\u027d\0\u02ae\0\u02df"+
    "\0\u0310\0\u0341\0\u0372\0\u03a3\0\223\0\u03d4\0\u0405\0\223"+
    "\0\u0436\0\223\0\u0467\0\u0498\0\u04c9\0\u04fa\0\u052b\0\u055c"+
    "\0\223\0\223\0\223\0\223\0\223\0\223\0\223\0\223"+
    "\0\223\0\223\0\223\0\u058d\0\223\0\u05be\0\u05ef\0\u0620"+
    "\0\u0157\0\u0651\0\u0682\0\u06b3\0\u06e4\0\u0715\0\u0746\0\u0777"+
    "\0\u07a8\0\u07d9\0\u080a\0\u083b\0\u086c\0\u089d\0\u08ce\0\u08ff"+
    "\0\u0930\0\u0961\0\u0992\0\u09c3\0\u09f4\0\223\0\223\0\223"+
    "\0\u0a25\0\u0a56\0\223\0\223\0\223\0\223\0\223\0\223"+
    "\0\223\0\u0a87\0\u0ab8\0\u0157\0\u0ae9\0\u0b1a\0\u0b4b\0\u0b7c"+
    "\0\u0bad\0\u0bde\0\u0c0f\0\u0c40\0\u0c71\0\u0ca2\0\u0157\0\u0cd3"+
    "\0\u0d04\0\u0157\0\u0d35\0\u0157\0\u0d66\0\u0d97\0\u09f4\0\u0dc8"+
    "\0\u0df9\0\u0e2a\0\u0e5b\0\u0157\0\u0e8c\0\u0ebd\0\u0eee\0\u0f1f"+
    "\0\u0f50\0\u0f81\0\u0157\0\u0fb2\0\u0fe3\0\u0157\0\u0157\0\u0157"+
    "\0\u1014\0\u1045\0\u1076\0\223\0\u10a7\0\u0157\0\u10d8\0\u1109"+
    "\0\u113a\0\u116b\0\u0157\0\u119c\0\u0157\0\u0157\0\u11cd\0\u0157"+
    "\0\u11fe\0\u0157\0\u0157\0\u122f\0\u0157\0\u1260\0\u1291\0\u0157"+
    "\0\u12c2\0\u12f3\0\u0157\0\u0157\0\u0157";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[149];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\10\1\14\1\10\1\15\1\16\2\10\1\17\1\10"+
    "\1\20\1\21\1\22\1\10\2\23\1\10\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\4\25\54"+
    "\1\4\17\54\1\55\12\54\1\56\25\57\1\4\20\57"+
    "\1\55\11\57\1\60\62\0\1\10\1\61\22\10\2\0"+
    "\2\10\31\0\5\10\1\62\1\10\1\63\5\10\1\64"+
    "\6\10\2\0\2\10\31\0\3\10\1\65\20\10\2\0"+
    "\2\10\31\0\24\10\2\0\2\10\31\0\12\10\1\66"+
    "\1\67\10\10\2\0\2\10\31\0\17\10\1\70\4\10"+
    "\2\0\2\10\31\0\2\10\1\71\21\10\2\0\2\10"+
    "\31\0\3\10\1\72\1\10\1\73\1\10\1\74\14\10"+
    "\2\0\2\10\31\0\11\10\1\75\12\10\2\0\2\10"+
    "\31\0\6\10\1\76\2\10\1\77\12\10\2\0\2\10"+
    "\31\0\2\10\1\100\12\10\1\101\6\10\2\0\2\10"+
    "\31\0\7\10\1\102\14\10\2\0\2\10\31\0\2\10"+
    "\1\103\21\10\2\0\2\10\31\0\6\10\1\104\15\10"+
    "\2\0\2\10\55\0\2\23\62\0\1\24\1\105\61\0"+
    "\1\106\6\0\1\107\52\0\1\110\61\0\1\111\1\112"+
    "\63\0\1\113\60\0\1\114\60\0\1\115\60\0\1\116"+
    "\63\0\1\117\61\0\1\120\14\0\25\54\1\0\17\54"+
    "\1\0\12\54\10\0\1\121\4\0\1\121\2\0\1\121"+
    "\25\0\1\121\12\0\1\121\25\57\1\0\20\57\1\0"+
    "\11\57\10\0\1\121\4\0\1\121\2\0\1\121\26\0"+
    "\1\121\11\0\1\121\1\0\6\10\1\122\15\10\2\0"+
    "\2\10\31\0\3\10\1\123\20\10\2\0\2\10\31\0"+
    "\16\10\1\124\5\10\2\0\2\10\31\0\4\10\1\125"+
    "\17\10\2\0\2\10\31\0\1\126\23\10\2\0\2\10"+
    "\31\0\7\10\1\127\14\10\2\0\2\10\31\0\2\10"+
    "\1\130\21\10\2\0\2\10\31\0\13\10\1\131\10\10"+
    "\2\0\2\10\31\0\7\10\1\132\14\10\2\0\2\10"+
    "\31\0\16\10\1\133\5\10\2\0\2\10\31\0\4\10"+
    "\1\134\6\10\1\135\10\10\2\0\2\10\31\0\1\136"+
    "\23\10\2\0\2\10\31\0\14\10\1\137\1\140\6\10"+
    "\2\0\2\10\31\0\1\141\23\10\2\0\2\10\31\0"+
    "\12\10\1\142\11\10\2\0\2\10\31\0\3\10\1\143"+
    "\20\10\2\0\2\10\31\0\6\10\1\144\15\10\2\0"+
    "\2\10\31\0\1\10\1\145\22\10\2\0\2\10\31\0"+
    "\2\10\1\146\21\10\2\0\2\10\60\0\1\147\30\0"+
    "\34\150\1\151\24\150\25\112\1\0\33\112\1\0\2\10"+
    "\1\152\21\10\2\0\2\10\31\0\4\10\1\153\17\10"+
    "\2\0\2\10\31\0\2\10\1\154\21\10\2\0\2\10"+
    "\31\0\13\10\1\155\10\10\2\0\2\10\31\0\13\10"+
    "\1\156\10\10\2\0\2\10\31\0\6\10\1\157\15\10"+
    "\2\0\2\10\31\0\15\10\1\160\6\10\2\0\2\10"+
    "\31\0\4\10\1\161\17\10\2\0\2\10\31\0\13\10"+
    "\1\162\10\10\2\0\2\10\31\0\2\10\1\163\21\10"+
    "\2\0\2\10\31\0\10\10\1\164\13\10\2\0\2\10"+
    "\31\0\3\10\1\165\20\10\2\0\2\10\31\0\2\10"+
    "\1\166\21\10\2\0\2\10\31\0\4\10\1\167\17\10"+
    "\2\0\2\10\31\0\3\10\1\170\20\10\2\0\2\10"+
    "\31\0\7\10\1\171\14\10\2\0\2\10\31\0\7\10"+
    "\1\172\14\10\2\0\2\10\30\0\34\150\1\173\24\150"+
    "\34\0\1\151\1\174\24\0\7\10\1\175\14\10\2\0"+
    "\2\10\31\0\2\10\1\176\21\10\2\0\2\10\31\0"+
    "\10\10\1\177\13\10\2\0\2\10\31\0\1\200\23\10"+
    "\2\0\2\10\31\0\7\10\1\201\14\10\2\0\2\10"+
    "\31\0\6\10\1\202\15\10\2\0\2\10\31\0\4\10"+
    "\1\203\17\10\2\0\2\10\31\0\1\204\23\10\2\0"+
    "\2\10\31\0\11\10\1\205\12\10\2\0\2\10\31\0"+
    "\2\10\1\206\21\10\2\0\2\10\31\0\15\10\1\207"+
    "\6\10\2\0\2\10\31\0\23\10\1\210\2\0\2\10"+
    "\30\0\34\150\1\173\1\174\23\150\1\0\10\10\1\211"+
    "\13\10\2\0\2\10\31\0\11\10\1\212\12\10\2\0"+
    "\2\10\31\0\10\10\1\213\13\10\2\0\2\10\31\0"+
    "\13\10\1\214\10\10\2\0\2\10\31\0\16\10\1\215"+
    "\5\10\2\0\2\10\31\0\16\10\1\216\5\10\2\0"+
    "\2\10\31\0\3\10\1\217\20\10\2\0\2\10\31\0"+
    "\11\10\1\220\12\10\2\0\2\10\31\0\5\10\1\221"+
    "\16\10\2\0\2\10\31\0\15\10\1\222\6\10\2\0"+
    "\2\10\31\0\13\10\1\223\10\10\2\0\2\10\31\0"+
    "\6\10\1\224\15\10\2\0\2\10\31\0\2\10\1\225"+
    "\21\10\2\0\2\10\30\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4900];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\20\1\1\11\2\1\1\11\1\1\1\11"+
    "\6\1\13\11\1\1\1\11\27\1\1\0\3\11\1\0"+
    "\1\1\7\11\26\1\2\0\21\1\1\0\1\11\31\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[149];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  ArucasLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 61: break;
          case 2: 
            { return ArucasTypes.IDENTIFIER;
            } 
            // fall through
          case 62: break;
          case 3: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 63: break;
          case 4: 
            { return ArucasTypes.NUMBER;
            } 
            // fall through
          case 64: break;
          case 5: 
            { return ArucasTypes.DOT;
            } 
            // fall through
          case 65: break;
          case 6: 
            { return ArucasTypes.OP_MINUS;
            } 
            // fall through
          case 66: break;
          case 7: 
            { return ArucasTypes.OP_PLUS;
            } 
            // fall through
          case 67: break;
          case 8: 
            { return ArucasTypes.OP_MUL;
            } 
            // fall through
          case 68: break;
          case 9: 
            { return ArucasTypes.OP_DIV;
            } 
            // fall through
          case 69: break;
          case 10: 
            { return ArucasTypes.OP_POW;
            } 
            // fall through
          case 70: break;
          case 11: 
            { return ArucasTypes.OP_NOT;
            } 
            // fall through
          case 71: break;
          case 12: 
            { return ArucasTypes.ASSIGNMENT;
            } 
            // fall through
          case 72: break;
          case 13: 
            { return ArucasTypes.OP_MORETHAN;
            } 
            // fall through
          case 73: break;
          case 14: 
            { return ArucasTypes.OP_LESSTHAN;
            } 
            // fall through
          case 74: break;
          case 15: 
            { yybegin(STRING_DOUBLE);
            } 
            // fall through
          case 75: break;
          case 16: 
            { yybegin(STRING_SINGLE);
            } 
            // fall through
          case 76: break;
          case 17: 
            { return ArucasTypes.LPAREN;
            } 
            // fall through
          case 77: break;
          case 18: 
            { return ArucasTypes.RPAREN;
            } 
            // fall through
          case 78: break;
          case 19: 
            { return ArucasTypes.LBRACK;
            } 
            // fall through
          case 79: break;
          case 20: 
            { return ArucasTypes.RBRACK;
            } 
            // fall through
          case 80: break;
          case 21: 
            { return ArucasTypes.LBRACE;
            } 
            // fall through
          case 81: break;
          case 22: 
            { return ArucasTypes.RBRACE;
            } 
            // fall through
          case 82: break;
          case 23: 
            { return ArucasTypes.COLON;
            } 
            // fall through
          case 83: break;
          case 24: 
            { return ArucasTypes.SEMICOLON;
            } 
            // fall through
          case 84: break;
          case 25: 
            { return ArucasTypes.COMMA;
            } 
            // fall through
          case 85: break;
          case 26: 
            { 
            } 
            // fall through
          case 86: break;
          case 27: 
            { yybegin(YYINITIAL); return ArucasTypes.STRING;
            } 
            // fall through
          case 87: break;
          case 28: 
            { return ArucasTypes.KW_IF;
            } 
            // fall through
          case 88: break;
          case 29: 
            { return ArucasTypes.OP_MM;
            } 
            // fall through
          case 89: break;
          case 30: 
            { return ArucasTypes.POINTER;
            } 
            // fall through
          case 90: break;
          case 31: 
            { return ArucasTypes.OP_PP;
            } 
            // fall through
          case 91: break;
          case 32: 
            { return ArucasTypes.COMMENT;
            } 
            // fall through
          case 92: break;
          case 33: 
            { return ArucasTypes.OP_NOTEQUALS;
            } 
            // fall through
          case 93: break;
          case 34: 
            { return ArucasTypes.OP_EQUALS;
            } 
            // fall through
          case 94: break;
          case 35: 
            { return ArucasTypes.OP_MORETHANEQ;
            } 
            // fall through
          case 95: break;
          case 36: 
            { return ArucasTypes.OP_LESSTHANEQ;
            } 
            // fall through
          case 96: break;
          case 37: 
            { return ArucasTypes.OP_LOGICAL_OR;
            } 
            // fall through
          case 97: break;
          case 38: 
            { return ArucasTypes.OP_LOGICAL_AND;
            } 
            // fall through
          case 98: break;
          case 39: 
            { return ArucasTypes.KW_FOR;
            } 
            // fall through
          case 99: break;
          case 40: 
            { return ArucasTypes.KW_FUN;
            } 
            // fall through
          case 100: break;
          case 41: 
            { return ArucasTypes.KW_TRY;
            } 
            // fall through
          case 101: break;
          case 42: 
            { return ArucasTypes.KW_NEW;
            } 
            // fall through
          case 102: break;
          case 43: 
            { return ArucasTypes.KW_VAR;
            } 
            // fall through
          case 103: break;
          case 44: 
            { return ArucasTypes.KW_ELSE;
            } 
            // fall through
          case 104: break;
          case 45: 
            { return ArucasTypes.KW_CASE;
            } 
            // fall through
          case 105: break;
          case 46: 
            { return ArucasTypes.KW_TRUE;
            } 
            // fall through
          case 106: break;
          case 47: 
            { return ArucasTypes.KW_THIS;
            } 
            // fall through
          case 107: break;
          case 48: 
            { return ArucasTypes.KW_NULL;
            } 
            // fall through
          case 108: break;
          case 49: 
            { return ArucasTypes.KW_FALSE;
            } 
            // fall through
          case 109: break;
          case 50: 
            { return ArucasTypes.KW_CLASS;
            } 
            // fall through
          case 110: break;
          case 51: 
            { return ArucasTypes.KW_CATCH;
            } 
            // fall through
          case 111: break;
          case 52: 
            { return ArucasTypes.KW_WHILE;
            } 
            // fall through
          case 112: break;
          case 53: 
            { return ArucasTypes.KW_BREAK;
            } 
            // fall through
          case 113: break;
          case 54: 
            { return ArucasTypes.KW_SWITCH;
            } 
            // fall through
          case 114: break;
          case 55: 
            { return ArucasTypes.KW_STATIC;
            } 
            // fall through
          case 115: break;
          case 56: 
            { return ArucasTypes.KW_RETURN;
            } 
            // fall through
          case 116: break;
          case 57: 
            { return ArucasTypes.KW_FOREACH;
            } 
            // fall through
          case 117: break;
          case 58: 
            { return ArucasTypes.KW_DEFAULT;
            } 
            // fall through
          case 118: break;
          case 59: 
            { return ArucasTypes.KW_OPERATOR;
            } 
            // fall through
          case 119: break;
          case 60: 
            { return ArucasTypes.KW_CONTINUE;
            } 
            // fall through
          case 120: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
