/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package me.hardcoded.arucas.language;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import me.hardcoded.arucas.psi.ArucasTypes;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Arucas.flex</tt>
 */
class ArucasLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING_DOUBLE = 2;
  public static final int STRING_SINGLE = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [8, 6, 7]
   * Total runtime size is 1040 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>13]|((ch>>7)&0x3f)]|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 136 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\207\100");

  /* The ZZ_CMAP_Y table has 128 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\177\200");

  /* The ZZ_CMAP_A table has 256 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\27\1\26\1\0\1\27\1\25\22\0\1\27\1\40\1\50\3\0\1\46\1\51\2\41\1\35"+
    "\1\34\1\47\1\33\1\32\1\36\12\31\1\41\1\47\1\44\1\42\1\43\2\0\32\30\1\41\1"+
    "\52\1\41\1\37\1\30\1\0\1\10\1\23\1\11\1\22\1\3\1\2\1\30\1\12\1\1\1\30\1\24"+
    "\1\4\1\30\1\17\1\6\1\20\1\30\1\7\1\5\1\14\1\16\1\21\1\13\1\30\1\15\1\30\1"+
    "\41\1\45\1\41\202\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\16\2\1\3\1\4\1\5\5\6\1\5"+
    "\2\1\1\7\1\10\1\11\1\12\1\13\3\12\1\14"+
    "\23\2\2\0\1\15\1\12\1\14\17\2\1\4\2\0"+
    "\2\15\7\2\1\16\2\2\1\0\7\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[100];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\53\0\126\0\201\0\254\0\327\0\u0102\0\u012d"+
    "\0\u0158\0\u0183\0\u01ae\0\u01d9\0\u0204\0\u022f\0\u025a\0\u0285"+
    "\0\u02b0\0\u02db\0\u0306\0\u0331\0\201\0\u035c\0\u0387\0\201"+
    "\0\u03b2\0\u03dd\0\u03dd\0\u0408\0\u0433\0\201\0\201\0\201"+
    "\0\u045e\0\201\0\u0489\0\u04b4\0\u04df\0\u012d\0\u050a\0\u0535"+
    "\0\u0560\0\u058b\0\u05b6\0\u05e1\0\u060c\0\u0637\0\u0662\0\u068d"+
    "\0\u06b8\0\u06e3\0\u070e\0\u0739\0\u0764\0\u078f\0\u07ba\0\u07e5"+
    "\0\u0810\0\u083b\0\u0866\0\u0891\0\201\0\u08bc\0\u08e7\0\u0912"+
    "\0\u093d\0\u0968\0\u0993\0\u09be\0\u09e9\0\u0a14\0\u0a3f\0\u0a6a"+
    "\0\u0a95\0\u0ac0\0\u0aeb\0\u0b16\0\u0b41\0\u083b\0\u0b6c\0\u0b97"+
    "\0\u0bc2\0\201\0\u0bed\0\u0c18\0\u0c43\0\u0c6e\0\u0c99\0\u0cc4"+
    "\0\u0cef\0\u012d\0\u0d1a\0\u0d45\0\u0d70\0\u0d9b\0\u0dc6\0\u0df1"+
    "\0\u0e1c\0\u0e47\0\u0e72\0\u0e9d";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[100];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\10\1\14\1\10\1\15\1\16\2\10\1\17\1\10"+
    "\1\20\1\21\1\22\1\10\3\23\1\10\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\30\1\32\1\25\3\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\4\25\41\2\4"+
    "\21\41\1\42\1\41\1\43\25\44\2\4\22\44\1\42"+
    "\1\45\54\0\1\10\1\46\22\10\3\0\2\10\22\0"+
    "\5\10\1\47\1\10\1\50\5\10\1\51\6\10\3\0"+
    "\2\10\22\0\3\10\1\52\20\10\3\0\2\10\22\0"+
    "\24\10\3\0\2\10\22\0\12\10\1\53\1\54\10\10"+
    "\3\0\2\10\22\0\17\10\1\55\4\10\3\0\2\10"+
    "\22\0\2\10\1\56\21\10\3\0\2\10\22\0\3\10"+
    "\1\57\1\10\1\60\1\10\1\61\14\10\3\0\2\10"+
    "\22\0\11\10\1\62\12\10\3\0\2\10\22\0\6\10"+
    "\1\63\2\10\1\64\12\10\3\0\2\10\22\0\2\10"+
    "\1\65\12\10\1\66\6\10\3\0\2\10\22\0\7\10"+
    "\1\67\14\10\3\0\2\10\22\0\2\10\1\70\21\10"+
    "\3\0\2\10\22\0\6\10\1\71\15\10\3\0\2\10"+
    "\46\0\3\23\54\0\1\24\1\72\53\0\1\30\7\0"+
    "\1\25\43\0\1\30\53\0\1\73\1\74\56\0\1\25"+
    "\55\0\1\25\53\0\1\25\4\0\25\41\2\0\21\41"+
    "\1\0\1\41\10\0\1\75\4\0\1\75\2\0\1\75"+
    "\30\0\1\75\1\0\1\75\25\44\2\0\22\44\11\0"+
    "\1\75\4\0\1\75\2\0\1\75\31\0\2\75\1\0"+
    "\6\10\1\76\15\10\3\0\2\10\22\0\3\10\1\77"+
    "\20\10\3\0\2\10\22\0\16\10\1\46\5\10\3\0"+
    "\2\10\22\0\4\10\1\100\17\10\3\0\2\10\22\0"+
    "\1\101\23\10\3\0\2\10\22\0\7\10\1\102\14\10"+
    "\3\0\2\10\22\0\2\10\1\103\21\10\3\0\2\10"+
    "\22\0\13\10\1\104\10\10\3\0\2\10\22\0\7\10"+
    "\1\105\14\10\3\0\2\10\22\0\16\10\1\106\5\10"+
    "\3\0\2\10\22\0\4\10\1\100\6\10\1\107\10\10"+
    "\3\0\2\10\22\0\1\110\23\10\3\0\2\10\22\0"+
    "\14\10\1\46\1\111\6\10\3\0\2\10\22\0\1\112"+
    "\23\10\3\0\2\10\22\0\12\10\1\46\11\10\3\0"+
    "\2\10\22\0\3\10\1\113\20\10\3\0\2\10\22\0"+
    "\6\10\1\46\15\10\3\0\2\10\22\0\1\10\1\114"+
    "\22\10\3\0\2\10\22\0\2\10\1\115\21\10\3\0"+
    "\2\10\52\0\1\116\21\0\35\117\1\120\15\117\25\74"+
    "\1\121\1\122\24\74\1\0\2\10\1\123\21\10\3\0"+
    "\2\10\22\0\4\10\1\111\17\10\3\0\2\10\22\0"+
    "\2\10\1\46\21\10\3\0\2\10\22\0\13\10\1\107"+
    "\10\10\3\0\2\10\22\0\13\10\1\124\10\10\3\0"+
    "\2\10\22\0\6\10\1\125\15\10\3\0\2\10\22\0"+
    "\15\10\1\126\6\10\3\0\2\10\22\0\4\10\1\127"+
    "\17\10\3\0\2\10\22\0\13\10\1\130\10\10\3\0"+
    "\2\10\22\0\10\10\1\131\13\10\3\0\2\10\22\0"+
    "\3\10\1\100\20\10\3\0\2\10\22\0\2\10\1\132"+
    "\21\10\3\0\2\10\22\0\4\10\1\132\17\10\3\0"+
    "\2\10\22\0\3\10\1\132\20\10\3\0\2\10\22\0"+
    "\7\10\1\133\14\10\3\0\2\10\22\0\7\10\1\134"+
    "\14\10\3\0\2\10\21\0\35\117\1\135\15\117\35\0"+
    "\1\120\1\122\42\0\1\122\25\0\7\10\1\107\14\10"+
    "\3\0\2\10\22\0\1\136\23\10\3\0\2\10\22\0"+
    "\7\10\1\137\14\10\3\0\2\10\22\0\6\10\1\51"+
    "\15\10\3\0\2\10\22\0\4\10\1\46\17\10\3\0"+
    "\2\10\22\0\1\140\23\10\3\0\2\10\22\0\11\10"+
    "\1\46\12\10\3\0\2\10\22\0\15\10\1\141\6\10"+
    "\3\0\2\10\22\0\23\10\1\46\3\0\2\10\21\0"+
    "\35\117\1\135\1\122\14\117\1\0\10\10\1\46\13\10"+
    "\3\0\2\10\22\0\13\10\1\142\10\10\3\0\2\10"+
    "\22\0\16\10\1\143\5\10\3\0\2\10\22\0\3\10"+
    "\1\144\20\10\3\0\2\10\22\0\5\10\1\67\16\10"+
    "\3\0\2\10\22\0\15\10\1\100\6\10\3\0\2\10"+
    "\22\0\13\10\1\46\10\10\3\0\2\10\21\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3784];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\20\1\1\11\2\1\1\11\5\1\3\11"+
    "\1\1\1\11\27\1\2\0\1\1\1\11\21\1\2\0"+
    "\1\1\1\11\12\1\1\0\7\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[100];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  ArucasLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 15: break;
          case 2: 
            { return ArucasTypes.IDENTIFIER;
            } 
            // fall through
          case 16: break;
          case 3: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 17: break;
          case 4: 
            { return ArucasTypes.NUMBER;
            } 
            // fall through
          case 18: break;
          case 5: 
            { return ArucasTypes.SYNTAX;
            } 
            // fall through
          case 19: break;
          case 6: 
            { return ArucasTypes.OPERATOR;
            } 
            // fall through
          case 20: break;
          case 7: 
            { return ArucasTypes.DELIMITER;
            } 
            // fall through
          case 21: break;
          case 8: 
            { yybegin(STRING_DOUBLE);
            } 
            // fall through
          case 22: break;
          case 9: 
            { yybegin(STRING_SINGLE);
            } 
            // fall through
          case 23: break;
          case 10: 
            { 
            } 
            // fall through
          case 24: break;
          case 11: 
            { yybegin(YYINITIAL); return ArucasTypes.STRING;
            } 
            // fall through
          case 25: break;
          case 12: 
            { return ArucasTypes.KEYWORD;
            } 
            // fall through
          case 26: break;
          case 13: 
            { return ArucasTypes.COMMENT;
            } 
            // fall through
          case 27: break;
          case 14: 
            { return ArucasTypes.VALUE_KEYWORD;
            } 
            // fall through
          case 28: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
