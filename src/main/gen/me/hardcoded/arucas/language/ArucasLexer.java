/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package me.hardcoded.arucas.language;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import me.hardcoded.arucas.psi.ArucasTypes;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Arucas.flex</tt>
 */
class ArucasLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING_DOUBLE = 2;
  public static final int STRING_SINGLE = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [8, 6, 7]
   * Total runtime size is 1040 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>13]|((ch>>7)&0x3f)]|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 136 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\207\100");

  /* The ZZ_CMAP_Y table has 128 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\177\200");

  /* The ZZ_CMAP_A table has 256 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\27\1\26\1\0\1\27\1\26\22\0\1\27\1\40\1\47\3\0\1\45\1\50\1\51\1\52"+
    "\1\35\1\34\1\61\1\33\1\32\1\36\12\31\1\57\1\60\1\42\1\46\1\41\2\0\32\30\1"+
    "\53\1\62\1\54\1\37\1\30\1\0\1\10\1\22\1\11\1\21\1\3\1\2\1\30\1\12\1\1\1\30"+
    "\1\23\1\4\1\25\1\17\1\6\1\24\1\30\1\7\1\5\1\14\1\16\1\20\1\13\1\30\1\15\1"+
    "\30\1\55\1\44\1\56\1\43\201\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\17\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\3\35"+
    "\1\37\32\2\2\0\1\40\1\41\1\42\1\0\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\35\3\2\1\54\2\2\1\55\15\2\1\56\3\2"+
    "\1\57\1\2\1\60\2\2\1\4\1\61\2\0\4\2"+
    "\1\62\1\2\1\63\1\64\10\2\1\65\2\2\1\66"+
    "\1\67\1\2\1\70\2\2\1\0\1\43\4\2\1\71"+
    "\1\72\2\2\1\73\2\2\1\74\1\2\1\75\1\76"+
    "\1\77\1\2\1\100\1\2\1\101\2\2\1\102\1\103"+
    "\1\2\1\104\3\2\1\105\1\106\2\2\1\107\1\2"+
    "\1\110\1\111\1\112";

  private static int [] zzUnpackAction() {
    int [] result = new int[191];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\146\0\231\0\314\0\377\0\u0132\0\u0165"+
    "\0\u0198\0\u01cb\0\u01fe\0\u0231\0\u0264\0\u0297\0\u02ca\0\u02fd"+
    "\0\u0330\0\u0363\0\u0396\0\u03c9\0\u03fc\0\u042f\0\u0462\0\u0495"+
    "\0\231\0\u04c8\0\231\0\u04fb\0\u052e\0\u0561\0\231\0\u0594"+
    "\0\u05c7\0\u05fa\0\231\0\231\0\231\0\231\0\231\0\231"+
    "\0\231\0\231\0\231\0\231\0\231\0\u062d\0\231\0\u0660"+
    "\0\u0693\0\u06c6\0\u0231\0\u06f9\0\u072c\0\u075f\0\u0792\0\u07c5"+
    "\0\u07f8\0\u082b\0\u085e\0\u0891\0\u08c4\0\u08f7\0\u092a\0\u095d"+
    "\0\u0990\0\u09c3\0\u09f6\0\u0a29\0\u0a5c\0\u0a8f\0\u0ac2\0\u0af5"+
    "\0\u0b28\0\u0b5b\0\u0b8e\0\u0bc1\0\u0bf4\0\u0c27\0\u0c5a\0\231"+
    "\0\231\0\231\0\u0c8d\0\u0cc0\0\231\0\231\0\231\0\231"+
    "\0\231\0\231\0\231\0\231\0\231\0\u0cf3\0\u0d26\0\u0d59"+
    "\0\u0d8c\0\u0dbf\0\u0df2\0\u0231\0\u0e25\0\u0e58\0\u0e8b\0\u0ebe"+
    "\0\u0ef1\0\u0f24\0\u0f57\0\u0f8a\0\u0fbd\0\u0ff0\0\u1023\0\u1056"+
    "\0\u1089\0\u0231\0\u10bc\0\u10ef\0\u1122\0\u0231\0\u1155\0\u0231"+
    "\0\u1188\0\u11bb\0\u0c27\0\231\0\u11ee\0\u1221\0\u1254\0\u1287"+
    "\0\u12ba\0\u12ed\0\u0231\0\u1320\0\u0231\0\u0231\0\u1353\0\u1386"+
    "\0\u13b9\0\u13ec\0\u141f\0\u1452\0\u1485\0\u14b8\0\u0231\0\u14eb"+
    "\0\u151e\0\u0231\0\u0231\0\u1551\0\u0231\0\u1584\0\u15b7\0\u15ea"+
    "\0\231\0\u161d\0\u1650\0\u1683\0\u16b6\0\u0231\0\u0231\0\u16e9"+
    "\0\u171c\0\u0231\0\u174f\0\u1782\0\u0231\0\u17b5\0\u0231\0\u0231"+
    "\0\u0231\0\u17e8\0\u0231\0\u181b\0\u0231\0\u184e\0\u1881\0\u0231"+
    "\0\u0231\0\u18b4\0\u0231\0\u18e7\0\u191a\0\u194d\0\u0231\0\u0231"+
    "\0\u1980\0\u19b3\0\u0231\0\u19e6\0\u0231\0\u0231\0\u0231";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[191];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\14\1\16\1\17\2\14\1\20\1\21"+
    "\1\22\1\23\3\14\2\24\1\14\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\4\26\56"+
    "\1\4\20\56\1\57\12\56\1\60\26\61\1\4\21\61"+
    "\1\57\11\61\1\62\64\0\1\14\1\63\14\14\1\64"+
    "\5\14\1\65\2\0\2\14\32\0\1\66\4\14\1\67"+
    "\1\70\1\71\5\14\1\72\7\14\2\0\2\14\32\0"+
    "\3\14\1\73\12\14\1\74\6\14\2\0\2\14\32\0"+
    "\5\14\1\75\17\14\2\0\2\14\32\0\12\14\1\76"+
    "\1\77\1\14\1\100\7\14\2\0\2\14\32\0\23\14"+
    "\1\101\1\14\2\0\2\14\32\0\2\14\1\102\22\14"+
    "\2\0\2\14\32\0\25\14\2\0\2\14\32\0\3\14"+
    "\1\103\1\14\1\104\1\14\1\105\15\14\2\0\2\14"+
    "\32\0\11\14\1\106\13\14\2\0\2\14\32\0\6\14"+
    "\1\107\2\14\1\110\13\14\2\0\2\14\32\0\2\14"+
    "\1\111\12\14\1\112\7\14\2\0\2\14\32\0\7\14"+
    "\1\113\15\14\2\0\2\14\32\0\2\14\1\114\22\14"+
    "\2\0\2\14\32\0\6\14\1\115\16\14\2\0\2\14"+
    "\57\0\2\24\64\0\1\25\1\116\62\0\1\117\63\0"+
    "\1\120\5\0\1\121\55\0\1\122\63\0\1\123\1\124"+
    "\72\0\1\125\55\0\1\126\4\0\1\127\56\0\1\130"+
    "\3\0\1\131\60\0\1\132\63\0\1\133\63\0\1\134"+
    "\14\0\26\56\1\0\20\56\1\0\12\56\10\0\1\135"+
    "\4\0\1\135\2\0\1\135\27\0\1\135\12\0\1\135"+
    "\26\61\1\0\21\61\1\0\11\61\10\0\1\135\4\0"+
    "\1\135\2\0\1\135\30\0\1\135\11\0\1\135\1\0"+
    "\13\14\1\136\11\14\2\0\2\14\32\0\23\14\1\137"+
    "\1\14\2\0\2\14\32\0\16\14\1\140\6\14\2\0"+
    "\2\14\32\0\6\14\1\141\16\14\2\0\2\14\32\0"+
    "\5\14\1\142\17\14\2\0\2\14\32\0\3\14\1\143"+
    "\21\14\2\0\2\14\32\0\16\14\1\144\6\14\2\0"+
    "\2\14\32\0\4\14\1\145\20\14\2\0\2\14\32\0"+
    "\15\14\1\146\7\14\2\0\2\14\32\0\10\14\1\147"+
    "\14\14\2\0\2\14\32\0\1\150\24\14\2\0\2\14"+
    "\32\0\7\14\1\151\15\14\2\0\2\14\32\0\23\14"+
    "\1\152\1\14\2\0\2\14\32\0\2\14\1\153\22\14"+
    "\2\0\2\14\32\0\13\14\1\154\11\14\2\0\2\14"+
    "\32\0\7\14\1\155\15\14\2\0\2\14\32\0\16\14"+
    "\1\156\6\14\2\0\2\14\32\0\4\14\1\157\6\14"+
    "\1\160\11\14\2\0\2\14\32\0\1\161\24\14\2\0"+
    "\2\14\32\0\14\14\1\162\1\163\7\14\2\0\2\14"+
    "\32\0\1\164\5\14\1\165\16\14\2\0\2\14\32\0"+
    "\12\14\1\166\12\14\2\0\2\14\32\0\3\14\1\167"+
    "\21\14\2\0\2\14\32\0\6\14\1\170\16\14\2\0"+
    "\2\14\32\0\1\14\1\171\23\14\2\0\2\14\32\0"+
    "\2\14\1\172\22\14\2\0\2\14\62\0\1\173\63\0"+
    "\1\174\30\0\35\175\1\176\25\175\26\124\1\0\34\124"+
    "\1\0\2\14\1\177\22\14\2\0\2\14\32\0\5\14"+
    "\1\200\17\14\2\0\2\14\32\0\7\14\1\201\15\14"+
    "\2\0\2\14\32\0\2\14\1\202\22\14\2\0\2\14"+
    "\32\0\24\14\1\203\2\0\2\14\32\0\4\14\1\204"+
    "\20\14\2\0\2\14\32\0\2\14\1\205\22\14\2\0"+
    "\2\14\32\0\24\14\1\206\2\0\2\14\32\0\7\14"+
    "\1\207\15\14\2\0\2\14\32\0\13\14\1\210\11\14"+
    "\2\0\2\14\32\0\13\14\1\211\11\14\2\0\2\14"+
    "\32\0\2\14\1\212\22\14\2\0\2\14\32\0\6\14"+
    "\1\213\16\14\2\0\2\14\32\0\15\14\1\214\7\14"+
    "\2\0\2\14\32\0\4\14\1\215\20\14\2\0\2\14"+
    "\32\0\13\14\1\216\11\14\2\0\2\14\32\0\2\14"+
    "\1\217\22\14\2\0\2\14\32\0\10\14\1\220\14\14"+
    "\2\0\2\14\32\0\3\14\1\221\21\14\2\0\2\14"+
    "\32\0\2\14\1\222\22\14\2\0\2\14\32\0\4\14"+
    "\1\223\20\14\2\0\2\14\32\0\5\14\1\224\17\14"+
    "\2\0\2\14\32\0\3\14\1\225\21\14\2\0\2\14"+
    "\32\0\7\14\1\226\15\14\2\0\2\14\32\0\7\14"+
    "\1\227\15\14\2\0\2\14\31\0\35\175\1\230\25\175"+
    "\35\0\1\176\1\231\25\0\6\14\1\232\16\14\2\0"+
    "\2\14\32\0\6\14\1\233\16\14\2\0\2\14\32\0"+
    "\3\14\1\234\21\14\2\0\2\14\32\0\7\14\1\235"+
    "\15\14\2\0\2\14\32\0\2\14\1\236\22\14\2\0"+
    "\2\14\32\0\3\14\1\237\21\14\2\0\2\14\32\0"+
    "\10\14\1\240\14\14\2\0\2\14\32\0\1\241\24\14"+
    "\2\0\2\14\32\0\6\14\1\242\16\14\2\0\2\14"+
    "\32\0\7\14\1\243\15\14\2\0\2\14\32\0\6\14"+
    "\1\244\16\14\2\0\2\14\32\0\4\14\1\245\20\14"+
    "\2\0\2\14\32\0\1\246\24\14\2\0\2\14\32\0"+
    "\11\14\1\247\13\14\2\0\2\14\32\0\2\14\1\250"+
    "\22\14\2\0\2\14\32\0\12\14\1\251\12\14\2\0"+
    "\2\14\32\0\15\14\1\252\7\14\2\0\2\14\32\0"+
    "\22\14\1\253\2\14\2\0\2\14\31\0\35\175\1\230"+
    "\1\231\24\175\1\0\1\14\1\254\23\14\2\0\2\14"+
    "\32\0\13\14\1\255\11\14\2\0\2\14\32\0\3\14"+
    "\1\256\21\14\2\0\2\14\32\0\10\14\1\257\14\14"+
    "\2\0\2\14\32\0\11\14\1\260\13\14\2\0\2\14"+
    "\32\0\10\14\1\261\14\14\2\0\2\14\32\0\13\14"+
    "\1\262\11\14\2\0\2\14\32\0\16\14\1\263\6\14"+
    "\2\0\2\14\32\0\16\14\1\264\6\14\2\0\2\14"+
    "\32\0\3\14\1\265\21\14\2\0\2\14\32\0\7\14"+
    "\1\266\15\14\2\0\2\14\32\0\14\14\1\267\10\14"+
    "\2\0\2\14\32\0\11\14\1\270\13\14\2\0\2\14"+
    "\32\0\5\14\1\271\17\14\2\0\2\14\32\0\15\14"+
    "\1\272\7\14\2\0\2\14\32\0\13\14\1\273\11\14"+
    "\2\0\2\14\32\0\10\14\1\274\14\14\2\0\2\14"+
    "\32\0\6\14\1\275\16\14\2\0\2\14\32\0\2\14"+
    "\1\276\22\14\2\0\2\14\32\0\2\14\1\277\22\14"+
    "\2\0\2\14\31\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6681];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\24\1\1\11\1\1\1\11\3\1\1\11"+
    "\3\1\13\11\1\1\1\11\36\1\2\0\3\11\1\0"+
    "\1\1\11\11\36\1\1\11\2\0\31\1\1\0\1\11"+
    "\46\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[191];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  ArucasLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 75: break;
          case 2: 
            { return ArucasTypes.IDENTIFIER;
            } 
            // fall through
          case 76: break;
          case 3: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 77: break;
          case 4: 
            { return ArucasTypes.NUMBER;
            } 
            // fall through
          case 78: break;
          case 5: 
            { return ArucasTypes.DOT;
            } 
            // fall through
          case 79: break;
          case 6: 
            { return ArucasTypes.OP_MINUS;
            } 
            // fall through
          case 80: break;
          case 7: 
            { return ArucasTypes.OP_PLUS;
            } 
            // fall through
          case 81: break;
          case 8: 
            { return ArucasTypes.OP_MUL;
            } 
            // fall through
          case 82: break;
          case 9: 
            { return ArucasTypes.OP_DIV;
            } 
            // fall through
          case 83: break;
          case 10: 
            { return ArucasTypes.OP_POW;
            } 
            // fall through
          case 84: break;
          case 11: 
            { return ArucasTypes.OP_NOT;
            } 
            // fall through
          case 85: break;
          case 12: 
            { return ArucasTypes.OP_MORETHAN;
            } 
            // fall through
          case 86: break;
          case 13: 
            { return ArucasTypes.OP_LESSTHAN;
            } 
            // fall through
          case 87: break;
          case 14: 
            { return ArucasTypes.OP_BXOR;
            } 
            // fall through
          case 88: break;
          case 15: 
            { return ArucasTypes.OP_BOR;
            } 
            // fall through
          case 89: break;
          case 16: 
            { return ArucasTypes.OP_BAND;
            } 
            // fall through
          case 90: break;
          case 17: 
            { return ArucasTypes.ASSIGNMENT;
            } 
            // fall through
          case 91: break;
          case 18: 
            { yybegin(STRING_DOUBLE);
            } 
            // fall through
          case 92: break;
          case 19: 
            { yybegin(STRING_SINGLE);
            } 
            // fall through
          case 93: break;
          case 20: 
            { return ArucasTypes.LPAREN;
            } 
            // fall through
          case 94: break;
          case 21: 
            { return ArucasTypes.RPAREN;
            } 
            // fall through
          case 95: break;
          case 22: 
            { return ArucasTypes.LBRACK;
            } 
            // fall through
          case 96: break;
          case 23: 
            { return ArucasTypes.RBRACK;
            } 
            // fall through
          case 97: break;
          case 24: 
            { return ArucasTypes.LBRACE;
            } 
            // fall through
          case 98: break;
          case 25: 
            { return ArucasTypes.RBRACE;
            } 
            // fall through
          case 99: break;
          case 26: 
            { return ArucasTypes.COLON;
            } 
            // fall through
          case 100: break;
          case 27: 
            { return ArucasTypes.SEMICOLON;
            } 
            // fall through
          case 101: break;
          case 28: 
            { return ArucasTypes.COMMA;
            } 
            // fall through
          case 102: break;
          case 29: 
            { 
            } 
            // fall through
          case 103: break;
          case 30: 
            { yybegin(YYINITIAL); return ArucasTypes.STRING;
            } 
            // fall through
          case 104: break;
          case 31: 
            { return ArucasTypes.KW_IF;
            } 
            // fall through
          case 105: break;
          case 32: 
            { return ArucasTypes.OP_MM;
            } 
            // fall through
          case 106: break;
          case 33: 
            { return ArucasTypes.POINTER;
            } 
            // fall through
          case 107: break;
          case 34: 
            { return ArucasTypes.OP_PP;
            } 
            // fall through
          case 108: break;
          case 35: 
            { return ArucasTypes.COMMENT;
            } 
            // fall through
          case 109: break;
          case 36: 
            { return ArucasTypes.OP_NOTEQUALS;
            } 
            // fall through
          case 110: break;
          case 37: 
            { return ArucasTypes.OP_BSHR;
            } 
            // fall through
          case 111: break;
          case 38: 
            { return ArucasTypes.OP_MORETHANEQ;
            } 
            // fall through
          case 112: break;
          case 39: 
            { return ArucasTypes.OP_BSHL;
            } 
            // fall through
          case 113: break;
          case 40: 
            { return ArucasTypes.OP_LESSTHANEQ;
            } 
            // fall through
          case 114: break;
          case 41: 
            { return ArucasTypes.OP_LOGICAL_OR;
            } 
            // fall through
          case 115: break;
          case 42: 
            { return ArucasTypes.OP_LOGICAL_AND;
            } 
            // fall through
          case 116: break;
          case 43: 
            { return ArucasTypes.OP_EQUALS;
            } 
            // fall through
          case 117: break;
          case 44: 
            { return ArucasTypes.KW_FOR;
            } 
            // fall through
          case 118: break;
          case 45: 
            { return ArucasTypes.KW_FUN;
            } 
            // fall through
          case 119: break;
          case 46: 
            { return ArucasTypes.KW_TRY;
            } 
            // fall through
          case 120: break;
          case 47: 
            { return ArucasTypes.KW_NEW;
            } 
            // fall through
          case 121: break;
          case 48: 
            { return ArucasTypes.KW_VAR;
            } 
            // fall through
          case 122: break;
          case 49: 
            { return ArucasTypes.ARBITRARY;
            } 
            // fall through
          case 123: break;
          case 50: 
            { return ArucasTypes.KW_FROM;
            } 
            // fall through
          case 124: break;
          case 51: 
            { return ArucasTypes.KW_ELSE;
            } 
            // fall through
          case 125: break;
          case 52: 
            { return ArucasTypes.KW_ENUM;
            } 
            // fall through
          case 126: break;
          case 53: 
            { return ArucasTypes.KW_CASE;
            } 
            // fall through
          case 127: break;
          case 54: 
            { return ArucasTypes.KW_TRUE;
            } 
            // fall through
          case 128: break;
          case 55: 
            { return ArucasTypes.KW_THIS;
            } 
            // fall through
          case 129: break;
          case 56: 
            { return ArucasTypes.KW_NULL;
            } 
            // fall through
          case 130: break;
          case 57: 
            { return ArucasTypes.KW_FALSE;
            } 
            // fall through
          case 131: break;
          case 58: 
            { return ArucasTypes.KW_LOCAL;
            } 
            // fall through
          case 132: break;
          case 59: 
            { return ArucasTypes.KW_SUPER;
            } 
            // fall through
          case 133: break;
          case 60: 
            { return ArucasTypes.KW_CLASS;
            } 
            // fall through
          case 134: break;
          case 61: 
            { return ArucasTypes.KW_CATCH;
            } 
            // fall through
          case 135: break;
          case 62: 
            { return ArucasTypes.KW_WHILE;
            } 
            // fall through
          case 136: break;
          case 63: 
            { return ArucasTypes.KW_THROW;
            } 
            // fall through
          case 137: break;
          case 64: 
            { return ArucasTypes.KW_BREAK;
            } 
            // fall through
          case 138: break;
          case 65: 
            { return ArucasTypes.KW_IMPORT;
            } 
            // fall through
          case 139: break;
          case 66: 
            { return ArucasTypes.KW_SWITCH;
            } 
            // fall through
          case 140: break;
          case 67: 
            { return ArucasTypes.KW_STATIC;
            } 
            // fall through
          case 141: break;
          case 68: 
            { return ArucasTypes.KW_RETURN;
            } 
            // fall through
          case 142: break;
          case 69: 
            { return ArucasTypes.KW_FINALLY;
            } 
            // fall through
          case 143: break;
          case 70: 
            { return ArucasTypes.KW_FOREACH;
            } 
            // fall through
          case 144: break;
          case 71: 
            { return ArucasTypes.KW_DEFAULT;
            } 
            // fall through
          case 145: break;
          case 72: 
            { return ArucasTypes.KW_OPERATOR;
            } 
            // fall through
          case 146: break;
          case 73: 
            { return ArucasTypes.KW_CONTINUE;
            } 
            // fall through
          case 147: break;
          case 74: 
            { return ArucasTypes.KW_INTERFACE;
            } 
            // fall through
          case 148: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
